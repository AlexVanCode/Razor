@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "CRUD - Insert with Validation");

    //consider your need for global variables
    var productname = "";
    var supplierid = "0";
    var categoryid = "0";
    var quantityperunit = "";
    var unitprice = "";
    var unitsinstock = "";
    var unitsonorder = "";
    var reorderlevel = "";

    //obtain two lists: SupplierList and CategoryList
    var db = Database.Open("NWDB");
    var supplierquery = @"SELECT SupplierID, CompanyName
FROM Suppliers
Order by CompanyName";
    var categoryquery = @"SELECT CategoryID, CategoryName
FROM Categories
Order by CategoryName";
    var supplierlist = db.Query(supplierquery);
    var categorylist = db.Query(categoryquery);

    //these are validator controls execute on the server side

    Validation.Add("ProductName",
         Validator.Required("Product name is required"),
          Validator.StringLength(16, 1, "Product name is limited to 16 characters"));

    Validation.Add("CategoryList",
         Validator.Range(1, 9, "Category is required"));

    //QuantityPerUnit is nullable which means 0 required characters
    Validation.Add("QuantityPerUnit",
 Validator.StringLength(40, 0, "Quantity per unit is limited to 40 characters"));

    Validation.Add("UnitPrice",
        Validator.Decimal("Unit price is a money field."),
        Validator.Range(0.00, 99.00, "Unit price must be 0.00 or more"));

    Validation.Add("UnitsInStock",
        Validator.Integer("Units in stock must be a number."),
        Validator.Range(0.00, 32767.0, "Units in stock must be between 0.00 and 32767"));

    Validation.Add("UnitsOnOrder",
        Validator.Integer("Units on order must be a number."),
        Validator.Range(0.00, 32767.0, "Units on order must be between 0.00 and 32767"));

    Validation.Add("ReorderLevel",
        Validator.Integer("Reorder level must be a number."),
        Validator.Range(0.00, 32767.0, "Reorder level must be between 0.00 and 32767"));

    //compare two fields together (ie password)
    //Validation.Add("ConfirmPassword",
    //    Validator.Required("Missing confirm password"),
    //      Validator.StringLength(160, 1, "Confirm password is too long"),
    //      Validator.EqualsTo("Password", "Password not confirmed"));

    //pattern testing (ie PostalCode)
    //Validation.Add("PostalCode",
    //     Validator.Regex(@"^[A-Za-z][0-9][A-Za-z][0-9][A-Za-z][0-9]$",
    //     "Postal Code format invalid (T7T7T7"));
}
@section head{
    <link href="~/Content/MySpacing.css" rel="stylesheet" />
}

@section banner{
    <h1>@Page.Title</h1>
}

@if (IsPost)
{
    productname = Request.Form["ProductName"];
    supplierid = Request.Form["SupplierList"];
    categoryid = Request.Form["CategoryList"];
    quantityperunit = Request.Form["QuantityPerUnit"];
    unitprice = Request.Form["UnitPrice"];
    unitsinstock = Request.Form["UnitsInStock"];
    unitsonorder = Request.Form["UnitsOnOrder"];
    reorderlevel = Request.Form["ReorderLevel"];
    var thebutton = Request.Form["FormButton"];

    if (thebutton.Equals("Clear"))
    {
        productname = "";
        supplierid = "0";
        categoryid = "0";
        quantityperunit = "";
        unitprice = "";
        unitsinstock = "";
        unitsonorder = "";
        reorderlevel = "";
    }
    else //pressed the ADD button
    {
        if (Validation.IsValid())
        {
            try
            {
                var inscommand = @"INSERT INTO Products (ProductName, SupplierID, CategoryID,
                    QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder,
                    ReorderLevel, Discontinued)
                    VALUES(@0, @1, @2, @3, @4, @5, @6, @7, 0)";
                db.Execute(inscommand, productname,
                    supplierid.Equals("0") ? null : supplierid,
                    categoryid.Equals("0") ? null : categoryid,
                    string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                    string.IsNullOrEmpty(unitprice) ? null : unitprice,
                    string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                    string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                    string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel);
                <div class="col-12 text-center">
                    <p style="color:green">
                        Product has been added
                    </p>
                </div>
            }
            catch (Exception ex)
            {
                <div class="col-12 text-center">
                    <p style="color:firebrick; font-size:large">
                        Processing error: @ex.Message
                    </p>
                </div>
            }
        }
    }
}
else
{

}

@Html.ValidationSummary()
<form id="theform" method="post">
    <div class="row offset-1">
        <input type="text" value="@productname"
               id="ProductName" name="ProductName" />
        &nbsp;&nbsp;<label for="ProductName">Name</label>
    </div>
    <div class="row offset-1">
        <select id="SupplierList" name="SupplierList">
            <option value="0">select supplier...</option>
            @foreach (var item in supplierlist)
            {

                if (supplierid == item.SupplierID.ToString())
                {
                    <option value="@item.SupplierID" selected>@item.CompanyName</option>
                }
                else
                {
                    <option value="@item.SupplierID">@item.CompanyName</option>
                }

            }
        </select>
        &nbsp;&nbsp;<label for="SupplierID">Supplier</label>
    </div>
    <div class="row offset-1">
        <select id="CategoryList" name="CategoryList">
            <option value="0">select category...</option>
            @foreach (var item in categorylist)
            {
                if (categoryid == item.CategoryID.ToString())
                {
                    <option value="@item.CategoryID" selected>@item.CategoryName</option>
                }
                else
                {
                    <option value="@item.CategoryID">@item.CategoryName</option>
                }
            }
        </select>
        &nbsp;&nbsp;<label for="CategoryID">Catgeory</label>
    </div>
    <div class="row offset-1">
        <input type="text" id="QuantityPerUnit" name="QuantityPerUnit"
               value="@quantityperunit" />
        &nbsp;&nbsp;<label for="QuantityPerUnit">Qty/Unit</label>
    </div>
    <div class="row offset-1">
        <input type="text" id="UnitPrice" name="UnitPrice"
               value="@unitprice" min="0.00" max="99.0" step="0.01" />
        &nbsp;&nbsp;<label for="UnitPrice">Price</label>
    </div>
    <div class="row offset-1">
        <input type="text" id="UnitsInStock" name="UnitsInStock"
               value="@unitsinstock" />
        &nbsp;&nbsp;<label for="UnitsInStock">QoH</label>
    </div>
    <div class="row offset-1">
        <input type="text" id="UnitsOnOrder" name="UnitsOnOrder"
               value="@unitsonorder" />
        &nbsp;&nbsp;<label for="UnitsOnOrder">QoO</label>
    </div>
    <div class="row offset-1">
        <input type="text" id="ReorderLevel" name="ReorderLevel"
               value="@reorderlevel" />
        &nbsp;&nbsp;<label for="ReorderLevel">RoL</label>
    </div>
    <div class="row offset-1">
        <input type="submit" id="FormButton" name="FormButton"
               class="btn btn-primary" value="Add" />
        <input type="submit" id="FormButton" name="FormButton" formnovalidate
               class="btn" value="Clear" />
    </div>
</form>
