@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "CRUD-Insert-with-Validation");

    //consider your need for global variables
    var productname = "";
    var supplierid = "0";
    var categoryid = "0";
    var quantityperunit = "";
    var unitprice = "";
    var unitsinstock = "";
    var unitsonorder = "";
    var reorderlevel = "";

    //obtain two lists: SupplierList and CategoryList
    var db = Database.Open("NWDB");
    var supplierquery = @"SELECT SupplierID, CompanyName
FROM Suppliers
Order by CompanyName";
    var categoryquery = @"SELECT CategoryID, CategoryName
FROM Categories
Order by CategoryName";
    var supplierlist = db.Query(supplierquery);
    var categorylist = db.Query(categoryquery);

    //these are validator controls that execute on the server side

    Validation.Add("ProductName",
         Validator.Required("Product name is required"),
          Validator.StringLength(160, 1, "Product name is limited to 160 characters"));

    //QuantityPerUnit is nullable which means 0 required characters
    Validation.Add("QuantityPerUnit",
         Validator.StringLength(40, 0, "Quantity per unit is limited to 40 characters"));

    Validation.Add("UnitPrice",
        Validator.Decimal("Unit price is a money field."),
        Validator.Range(0.00, double.MaxValue, "Unit price must be 0.00 or more"));

    Validation.Add("UnitsInStock",
        Validator.Integer("Units in stock must be a number."),
        Validator.Range(0.00, 32767.0, "Units in stock must be between 0.00 and 32767"));

    Validation.Add("UnitsOnOrder",
        Validator.Integer("Units on order must be a number."),
        Validator.Range(0.00, 32767.0, "Units on order must be between 0.00 and 32767"));

    Validation.Add("ReorderLevel",
        Validator.Integer("Reorder level must be a number."),
        Validator.Range(0.00, 32767.0, "Reorder level must be between 0.00 and 32767"));

    //compare two fields together (ie password)
    //Validation.Add("ConfirmPassword",
    //    Validator.Required("Missing confirm password"),
    //      Validator.StringLength(160, 1, "Confirm password is too long"),
    //      Validator.EqualsTo("Password", "Password not confirmed"));

    //pattern testing (ie PostalCode)
    //Validation.Add("PostalCode",
    //     Validator.Regex(@"^[A-Za-z][0-9][A-Za-z][0-9][A-Za-z][0-9]$",
    //     "Postal Code format invalid (T7T7T7"));
}
@section head{
    <link href="~/Content/MyCss.css" rel="stylesheet" />
}

@section banner{
    <h1>@Page.Title</h1>
}

@if (IsPost)
{
    // retreive the data from the form
    productname = Request.Form["ProductName"];
    supplierid = Request.Form["SupplierList"];
    categoryid = Request.Form["CategoryList"];
    quantityperunit = Request.Form["QuantityPerUnit"];
    unitprice = Request.Form["UnitPrice"];
    unitsinstock = Request.Form["UnitsInStock"];
    unitsonorder = Request.Form["UnitsOnOrder"];
    reorderlevel = Request.Form["ReorderLevel"];
    var thebutton = Request.Form["FormButton"];

    //when you have multiple buttons, a good practice is to determine
    //    what action to do for the reset/clear button FIRST!
    if (thebutton.Equals("Clear"))
    {
        //empty the form fields
        productname = "";
        supplierid = "0";
        categoryid = "0";
        quantityperunit = "";
        unitprice = "";
        unitsinstock = "";
        unitsonorder = "";
        reorderlevel = "";
    }
    else
    {
        //Validation of data
        //Validation.IsValid() is used to execute the server side validation
        //the if statement DOES NOT need an else as the Validation control
        //message will appear in your Summary() or Message() controls
        if (Validation.IsValid())
        {
            //you may have logical validation needed for your data that cannot
            //be accomplished using Validation Controls or HTML5
            //this type of validation is a programmed validation

            //assume that the categoryid is a required field
            var valid = true;
            if (categoryid.Equals("0"))
            {
                valid = false;
                <div class="col-12 text-center">
                    <p style="color:darkslateblue">
                        You must select a category
                    </p>
                </div>
            }
            //check validation result
            if (valid)
            {
                //good data
                try
                {
                    //connect to the database
                    //  done above
                    //create sql command
                    var inscommand = @"INSERT INTO Products (ProductName, SupplierID, CategoryID,
                QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder,
                ReorderLevel, Discontinued)
                VALUES(@0, @1, @2, @3, @4, @5, @6, @7, 0)";
                    //execute the command
                    db.Execute(inscommand, productname,
                        supplierid.Equals("0") ? null : supplierid,
                        categoryid.Equals("0") ? null : categoryid,
                        string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                        string.IsNullOrEmpty(unitprice) ? null : unitprice,
                        string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                        string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                        string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel);
                    <div class="col-12 text-center">
                        <p style="color:green">
                            Product has been added
                        </p>
                    </div>
                }
                catch (Exception ex)
                {
                    <div class="col-12 text-center">
                        <p style="color:firebrick; font-size:large">
                            Processing error: @ex.Message
                        </p>
                    </div>
                }
            }

        }

    }

}
else
{

}
@* there are two ways to display your validation errors
    a) using the ValidationSummary()
        - bulleted list of all errors in all fields
    b) using the ValidationMessage()
        - placed beside the actual control field
        - display only the 1st error of field*@

@Html.ValidationSummary()
<fieldset>
    <legend>Web Pages 2 Validation</legend>
    <form id="theform" method="post">
        <div class="row">
            <label class="label" for="ProductName">ProductName:</label>
            <span>@Html.TextBox("ProductName", Request["ProductName"])</span>
            @Html.ValidationMessage("ProductName")
        </div>
            


        <div>
            @*<input type="text" value="@productname"
               id="ProductName" name="ProductName" required />

        @Html.ValidationMessage("ProductName")*@
            <br />

            @{
                var items = new List<SelectListItem>{
        new SelectListItem {Value = "1", Text = "Blue"},
        new SelectListItem {Value = "2", Text = "Red"},
        new SelectListItem {Value = "3", Text = "Green", Selected = true},
        new SelectListItem {Value = "4", Text = "Yellow", Selected = true},
        new SelectListItem {Value = "5", Text = "Black"}
    };
            }
            @{ 
                List<SelectListItem> fun = new List<SelectListItem>();
                fun.Add(new SelectListItem {Value = "6", Text = "Ya Man" });
            }
            @Html.DropDownList("CategoryId", fun)

            <select id="SupplierList" name="SupplierList">
                <option value="0">select supplier...</option>
                @foreach (var item in supplierlist)
                {
                    //for the select control, the default display on an event
                    //   is the 1st option tag
                    //to retain the option selected between posts, you need to
                    //   set the selected option using the attribute selected
                    if (supplierid == item.SupplierID.ToString())
                    {
                        <option value="@item.SupplierID" selected>@item.CompanyName</option>
                    }
                    else
                    {
                        <option value="@item.SupplierID">@item.CompanyName</option>
                    }

                }
            </select>
            <br />
            <select id="CategoryList" name="CategoryList">
                <option value="0">select category...</option>
                @foreach (var item in categorylist)
                {
                    if (categoryid == item.CategoryID.ToString())
                    {
                        <option value="@item.CategoryID" selected>@item.CategoryName</option>
                    }
                    else
                    {
                        <option value="@item.CategoryID">@item.CategoryName</option>
                    }
                }
            </select>
            <br />
            <input type="text" id="QuantityPerUnit" name="QuantityPerUnit"
                   value="@quantityperunit" /><br />
            <input type="number" id="UnitPrice" name="UnitPrice"
                   value="@unitprice" min="0.00" max="9999999.0" step="0.01" /><br />
            <input type="text" id="UnitsInStock" name="UnitsInStock"
                   value="@unitsinstock" /><br />
            @Html.ValidationMessage("UnitsInStock")
            <input type="text" id="UnitsOnOrder" name="UnitsOnOrder"
                   value="@unitsonorder" /><br />
            <input type="text" id="ReorderLevel" name="ReorderLevel"
                   value="@reorderlevel" /><br />
            <br />
        </div>
        
        <div class="row">
            <div class="col-md-12 text-center">
                <button type="submit" id="FormButton" name="FormButton"
                        class="btn btn-primary" value="Add">
                    Add
                </button>
                <button type="submit" id="FormButton" name="FormButton" formnovalidate
                        class="btn" value="Clear">
                    Clear
                </button>
            </div>
        </div>
    </form>
</fieldset>